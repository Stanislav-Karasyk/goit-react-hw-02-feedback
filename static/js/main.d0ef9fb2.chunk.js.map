{"version":3,"sources":["components/feedbackOptions/FeedbackOptions.js","components/notification/Notification.js","components/section/Section.js","components/statistics/Statistics.js","components/App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","onHandleClick","className","name","onClick","Notification","message","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","App","state","e","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","parseInt","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAaeA,EAXS,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,cACzC,OACE,sBAAKC,UAAU,YAAf,UACE,6BAAKF,IACL,wBAAQG,KAAK,OAAOC,QAASH,EAA7B,kBACA,wBAAQE,KAAK,UAAUC,QAASH,EAAhC,qBACA,wBAAQE,KAAK,MAAMC,QAASH,EAA5B,qBCASI,EANM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,4BAAIA,KCOGC,EATC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACrB,OACI,oCACI,6BAAKD,IACJC,MCoBEC,EAvBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,uCACQ,+BAAOJ,OAEf,0CACW,+BAAOC,OAElB,sCACO,+BAAOC,OAEd,wCACS,+BAAOC,OAEhB,mDAEE,iCAAOC,EAAP,cC8BOC,E,4MA3CbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPZ,cAAgB,SAACiB,GAAK,IACbf,EAAQe,EAAEC,OAAVhB,KACP,EAAKiB,UAAS,SAAAC,GAAS,sBAAQlB,EAAOkB,EAAUlB,GAAQ,O,EAG1DmB,mBAAqB,WACnB,OAAO,EAAKL,MAAMN,KAAO,EAAKM,MAAMJ,IAAM,EAAKI,MAAML,S,EAGvDW,gCAAkC,WAChC,OAAOC,SAAU,EAAKP,MAAMN,KAAO,EAAKW,qBAAwB,M,4CAGlE,WAAU,IAAD,EACwBG,KAAKR,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,qCACE,cAAC,EAAD,UACE,cAAC,EAAD,CACEb,gBAAgB,wBAChBC,cAAewB,KAAKxB,kBAGvBwB,KAAKH,qBAAuB,cAAC,EAAD,CAASd,MAAM,aAAf,SAC3B,cAAC,EAAD,CACEG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOW,KAAKH,qBACZP,mBAAoBU,KAAKF,sCAEhB,cAAC,EAAD,CAAcjB,QAAQ,6B,GAvCzBoB,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d0ef9fb2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FeedbackOptions = ({onLeaveFeedback, onHandleClick}) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>{onLeaveFeedback}</h2>\r\n      <button name='good' onClick={onHandleClick}>Good</button>\r\n      <button name='neutral' onClick={onHandleClick}>Neutral</button>\r\n      <button name='bad' onClick={onHandleClick}>Bad</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n\r\n","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    return (\r\n        <p>{message}</p>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\n\r\nconst Section = ({title, children}) => {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Section\r\n","import React from 'react';\r\n\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      <p>\r\n        Good: <span>{good}</span>\r\n      </p>\r\n      <p>\r\n        Neutral: <span>{neutral}</span>\r\n      </p>\r\n      <p>\r\n        Bad: <span>{bad}</span>\r\n      </p>\r\n      <p>\r\n        Total: <span>{total}</span>\r\n      </p>\r\n      <p>\r\n        Positive Feedback:\r\n        <span>{positivePercentage}%</span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\nimport FeedbackOptions from './feedbackOptions/FeedbackOptions.js';\nimport Notification from './notification/Notification.js';\nimport Section from './section/Section.js';\nimport Statistics from './statistics/Statistics.js';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onHandleClick = (e)=>{\n    const {name} = e.target\n    this.setState(prevState => ({ [name]: prevState[name] + 1 }));\n  }\n  \n  countTotalFeedback = () => {\n    return this.state.good + this.state.bad + this.state.neutral;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return parseInt((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <>\n        <Section>\n          <FeedbackOptions\n            onLeaveFeedback=\"Please leave feedback\"\n            onHandleClick={this.onHandleClick}\n          />\n        </Section>  \n        {this.countTotalFeedback() ? <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          /> \n        </Section> : <Notification message=\"No feedback given\"/>}\n      </>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}